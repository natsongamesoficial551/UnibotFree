import discord
from discord.ext import commands
import random
import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
import motor.motor_asyncio
import os
from dotenv import load_dotenv
import re

load_dotenv()

class FunCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.client = motor.motor_asyncio.AsyncIOMotorClient(os.getenv('MONGO_URI'))
        self.db = self.client.bot_database
        self.fun_collection = self.db.fun_data
        
        # Language detection patterns
        self.pt_patterns = [
            r'\b(verdade|desafio|pergunta|resposta|piada|abra√ßo|beijar|tapa|amor|√≥dio|gay|ship|8ball|bola|pergunto)\b',
            r'\b(sim|n√£o|talvez|claro|obvio|jamais|nunca|sempre|quem|como|onde|quando|porque)\b'
        ]
        
        # Multilingual responses
        self.responses = {
            'pt': {
                '8ball': [
                    "Sim, definitivamente!", "√â certo!", "Sem d√∫vida!", "Sim, com certeza!",
                    "Voc√™ pode contar com isso!", "Como eu vejo, sim!", "Muito prov√°vel!",
                    "Parece bom!", "Sim!", "Os sinais apontam para sim!",
                    "Resposta nebulosa, tente novamente!", "Pergunte novamente mais tarde!",
                    "Melhor n√£o te contar agora!", "N√£o posso prever agora!",
                    "Concentre-se e pergunte novamente!", "N√£o conte com isso!",
                    "Minha resposta √© n√£o!", "Minhas fontes dizem n√£o!",
                    "Perspectivas n√£o muito boas!", "Muito duvidoso!"
                ],
                'truth_questions': [
                    "Qual foi a coisa mais embara√ßosa que voc√™ j√° fez?",
                    "Quem foi seu primeiro crush?",
                    "Qual √© seu maior medo?",
                    "Qual foi a maior mentira que voc√™ j√° contou?",
                    "O que voc√™ faria se fosse invis√≠vel por um dia?",
                    "Qual √© o seu segredo mais profundo?",
                    "Voc√™ j√° teve uma paix√£o por algu√©m deste servidor?",
                    "Qual foi o momento mais constrangedor da sua vida?",
                    "Se voc√™ pudesse mudar algo em voc√™, o que seria?",
                    "Qual √© a coisa mais infantil que voc√™ ainda faz?"
                ],
                'dare_challenges': [
                    "Mude seu nick para algo engra√ßado por 1 hora!",
                    "Cante uma m√∫sica no chat de voz!",
                    "Conte uma piada ruim no chat!",
                    "Poste um meme nos pr√≥ximos 3 canais!",
                    "Fale apenas em CAPS LOCK pelos pr√≥ximos 10 minutos!",
                    "Desenhe algo terr√≠vel e poste aqui!",
                    "Imite um animal pelos pr√≥ximos 5 minutos!",
                    "Conte uma hist√≥ria inventada sobre aliens!",
                    "Fa√ßa 20 flex√µes e comprove com foto!",
                    "Grave um √°udio cantando parab√©ns!"
                ],
                'jokes': [
                    "Por que o livro de matem√°tica estava triste? Porque tinha muitos problemas!",
                    "O que o pato disse para a pata? Vem qu√°!",
                    "Por que os p√°ssaros voam para o sul no inverno? Porque √© muito longe para ir andando!",
                    "O que acontece quando voc√™ cruza um peixe com um elefante? Voc√™ obt√©m nadar trunks!",
                    "Por que o espantalho ganhou um pr√™mio? Porque era excepcional em sua √°rea!",
                    "O que voc√™ chama de um urso sem orelhas? B!",
                    "Por que n√£o confiamos nas escadas? Porque elas est√£o sempre tramando algo!",
                    "O que o oceano disse para a praia? Nada, apenas acenou!",
                    "Por que o caf√© foi para a pol√≠cia? Foi mo√≠do!",
                    "O que voc√™ chama de um dinossauro que bate carros? Tyrannosaurus Wrecks!"
                ]
            },
            'en': {
                '8ball': [
                    "Yes, definitely!", "It is certain!", "Without a doubt!", "Yes, for sure!",
                    "You may rely on it!", "As I see it, yes!", "Most likely!",
                    "Outlook good!", "Yes!", "Signs point to yes!",
                    "Reply hazy, try again!", "Ask again later!",
                    "Better not tell you now!", "Cannot predict now!",
                    "Concentrate and ask again!", "Don't count on it!",
                    "My reply is no!", "My sources say no!",
                    "Outlook not so good!", "Very doubtful!"
                ],
                'truth_questions': [
                    "What's the most embarrassing thing you've ever done?",
                    "Who was your first crush?",
                    "What's your biggest fear?",
                    "What's the biggest lie you've ever told?",
                    "What would you do if you were invisible for a day?",
                    "What's your deepest secret?",
                    "Have you ever had a crush on someone from this server?",
                    "What was the most embarrassing moment of your life?",
                    "If you could change something about yourself, what would it be?",
                    "What's the most childish thing you still do?"
                ],
                'dare_challenges': [
                    "Change your nickname to something funny for 1 hour!",
                    "Sing a song in voice chat!",
                    "Tell a bad joke in chat!",
                    "Post a meme in the next 3 channels!",
                    "Speak only in CAPS LOCK for the next 10 minutes!",
                    "Draw something terrible and post it here!",
                    "Imitate an animal for the next 5 minutes!",
                    "Tell a made-up story about aliens!",
                    "Do 20 push-ups and prove it with a photo!",
                    "Record an audio singing happy birthday!"
                ],
                'jokes': [
                    "Why was the math book sad? It had too many problems!",
                    "What do you call a duck that gets all A's? A wise quacker!",
                    "Why do birds fly south for the winter? Because it's too far to walk!",
                    "What happens when you cross a fish with an elephant? You get swimming trunks!",
                    "Why did the scarecrow win an award? Because he was outstanding in his field!",
                    "What do you call a bear with no ears? B!",
                    "Why don't we trust stairs? Because they're always up to something!",
                    "What did the ocean say to the beach? Nothing, it just waved!",
                    "Why did the coffee go to the police? It got mugged!",
                    "What do you call a dinosaur that crashes his car? Tyrannosaurus Wrecks!"
                ]
            }
        }

    def detect_language(self, text):
        """Detect language based on text patterns"""
        text_lower = text.lower()
        
        # Check for Portuguese patterns
        for pattern in self.pt_patterns:
            if re.search(pattern, text_lower):
                return 'pt'
        
        # Default to English if no Portuguese patterns found
        return 'en'

    async def save_interaction(self, user_id, command, data=None):
        """Save user interaction to database"""
        try:
            await self.fun_collection.insert_one({
                'user_id': user_id,
                'command': command,
                'data': data,
                'timestamp': datetime.utcnow()
            })
        except Exception as e:
            print(f"Database error: {e}")

    @commands.command(name='verdade', aliases=['truth'])
    async def truth_command(self, ctx):
        """Truth or Dare - Truth questions / Verdade ou Desafio - Perguntas"""
        try:
            lang = self.detect_language(ctx.message.content)
            
            question = random.choice(self.responses[lang]['truth_questions'])
            
            embed = discord.Embed(
                title="ü§î Verdade / Truth" if lang == 'pt' else "ü§î Truth",
                description=question,
                color=discord.Color.blue(),
                timestamp=datetime.utcnow()
            )
            embed.set_footer(text=f"Perguntado por / Asked by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            await self.save_interaction(ctx.author.id, 'truth', {'question': question, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando verdade: {e}")

    @commands.command(name='desafio', aliases=['dare'])
    async def dare_command(self, ctx):
        """Truth or Dare - Dare challenges / Verdade ou Desafio - Desafios"""
        try:
            lang = self.detect_language(ctx.message.content)
            
            challenge = random.choice(self.responses[lang]['dare_challenges'])
            
            embed = discord.Embed(
                title="üòà Desafio / Dare" if lang == 'pt' else "üòà Dare",
                description=challenge,
                color=discord.Color.red(),
                timestamp=datetime.utcnow()
            )
            embed.set_footer(text=f"Desafiado por / Dared by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            await self.save_interaction(ctx.author.id, 'dare', {'challenge': challenge, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando desafio: {e}")

    @commands.command(name='8ball', aliases=['bola8', 'pergunta', 'ask'])
    async def eight_ball(self, ctx, *, question=None):
        """Magic 8-Ball / Bola M√°gica 8"""
        try:
            lang = self.detect_language(ctx.message.content + (question or ''))
            
            if not question:
                error_msg = "Voc√™ precisa fazer uma pergunta!" if lang == 'pt' else "You need to ask a question!"
                await ctx.send(error_msg)
                return
            
            answer = random.choice(self.responses[lang]['8ball'])
            
            embed = discord.Embed(
                title="üé± Bola M√°gica 8 / Magic 8-Ball" if lang == 'pt' else "üé± Magic 8-Ball",
                color=discord.Color.purple(),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="Pergunta / Question" if lang == 'pt' else "Question", 
                           value=question, inline=False)
            embed.add_field(name="Resposta / Answer" if lang == 'pt' else "Answer", 
                           value=f"üîÆ {answer}", inline=False)
            embed.set_footer(text=f"Perguntado por / Asked by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            await self.save_interaction(ctx.author.id, '8ball', 
                                      {'question': question, 'answer': answer, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando 8ball: {e}")

    @commands.command(name='piada', aliases=['joke'])
    async def joke_command(self, ctx):
        """Random jokes / Piadas aleat√≥rias"""
        try:
            lang = self.detect_language(ctx.message.content)
            
            joke = random.choice(self.responses[lang]['jokes'])
            
            embed = discord.Embed(
                title="üòÇ Piada / Joke" if lang == 'pt' else "üòÇ Joke",
                description=joke,
                color=discord.Color.gold(),
                timestamp=datetime.utcnow()
            )
            embed.set_footer(text=f"Solicitado por / Requested by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            await self.save_interaction(ctx.author.id, 'joke', {'joke': joke, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando piada: {e}")

    @commands.command(name='ship', aliases=['amor', 'love'])
    async def ship_command(self, ctx, user1: discord.Member = None, user2: discord.Member = None):
        """Ship two users / Shippar dois usu√°rios"""
        try:
            lang = self.detect_language(ctx.message.content)
            
            if not user1:
                user1 = ctx.author
            if not user2:
                error_msg = "Mencione algu√©m para shippar!" if lang == 'pt' else "Mention someone to ship!"
                await ctx.send(error_msg)
                return
            
            # Verificar se √© a mesma pessoa
            if user1.id == user2.id:
                selfship_msg = "üíï Amor pr√≥prio √© importante!" if lang == 'pt' else "üíï Self-love is important!"
                await ctx.send(selfship_msg)
                return
            
            # Calculate ship percentage based on user IDs (consistent results)
            combined_id = str(user1.id) + str(user2.id)
            percentage = abs(hash(combined_id) % 101)
            
            # Ship name
            ship_name = user1.display_name[:len(user1.display_name)//2] + user2.display_name[len(user2.display_name)//2:]
            
            # Reaction based on percentage
            if percentage >= 90:
                reaction = "üíï Amor verdadeiro!" if lang == 'pt' else "üíï True love!"
                color = discord.Color.pink()
            elif percentage >= 70:
                reaction = "üíñ Muito compat√≠veis!" if lang == 'pt' else "üíñ Very compatible!"
                color = discord.Color.red()
            elif percentage >= 50:
                reaction = "üíô Podem dar certo!" if lang == 'pt' else "üíô Could work out!"
                color = discord.Color.blue()
            elif percentage >= 30:
                reaction = "üíõ Apenas amigos!" if lang == 'pt' else "üíõ Just friends!"
                color = discord.Color.gold()
            else:
                reaction = "üíî N√£o combina..." if lang == 'pt' else "üíî Not compatible..."
                color = discord.Color.darker_grey()
            
            embed = discord.Embed(
                title=f"üíï Ship: {ship_name}",
                color=color,
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="üë´ Casal / Couple" if lang == 'pt' else "üë´ Couple", 
                           value=f"{user1.mention} ‚ù§Ô∏è {user2.mention}", inline=False)
            embed.add_field(name="üìä Compatibilidade / Compatibility" if lang == 'pt' else "üìä Compatibility", 
                           value=f"{percentage}%", inline=True)
            embed.add_field(name="üí≠ Resultado / Result" if lang == 'pt' else "üí≠ Result", 
                           value=reaction, inline=True)
            
            # Progress bar
            filled = int(percentage / 10)
            bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
            embed.add_field(name="üìà Medidor / Meter" if lang == 'pt' else "üìà Meter", 
                           value=f"`{bar}` {percentage}%", inline=False)
            
            embed.set_footer(text=f"Shippado por / Shipped by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            await self.save_interaction(ctx.author.id, 'ship', 
                                      {'user1': user1.id, 'user2': user2.id, 'percentage': percentage, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando ship: {e}")

    @commands.command(name='gay', aliases=['gayrate'])
    async def gay_rate(self, ctx, user: discord.Member = None):
        """Gay rate meter / Medidor gay"""
        try:
            lang = self.detect_language(ctx.message.content)
            
            if not user:
                user = ctx.author
            
            # Calculate percentage based on user ID (consistent results)
            percentage = abs(hash(str(user.id)) % 101)
            
            # Reactions based on percentage
            if percentage >= 90:
                reaction = "üè≥Ô∏è‚Äçüåà Super gay!" if lang == 'en' else "üè≥Ô∏è‚Äçüåà Super gay!"
            elif percentage >= 70:
                reaction = "üåà Muito gay!" if lang == 'pt' else "üåà Very gay!"
            elif percentage >= 50:
                reaction = "üíñ Meio gay!" if lang == 'pt' else "üíñ Kinda gay!"
            elif percentage >= 30:
                reaction = "üíô Um pouco gay!" if lang == 'pt' else "üíô A little gay!"
            else:
                reaction = "üíî N√£o gay!" if lang == 'pt' else "üíî Not gay!"
            
            embed = discord.Embed(
                title="üè≥Ô∏è‚Äçüåà Medidor Gay / Gay Meter" if lang == 'pt' else "üè≥Ô∏è‚Äçüåà Gay Meter",
                color=discord.Color.from_rgb(255, 105, 180),
                timestamp=datetime.utcnow()
            )
            embed.add_field(name="üë§ Usu√°rio / User" if lang == 'pt' else "üë§ User", 
                           value=user.mention, inline=True)
            embed.add_field(name="üìä Taxa Gay / Gay Rate" if lang == 'pt' else "üìä Gay Rate", 
                           value=f"{percentage}%", inline=True)
            embed.add_field(name="üí≠ Resultado / Result" if lang == 'pt' else "üí≠ Result", 
                           value=reaction, inline=False)
            
            # Progress bar
            filled = int(percentage / 10)
            bar = "üåà" * filled + "‚¨ú" * (10 - filled)
            embed.add_field(name="üìà Medidor / Meter" if lang == 'pt' else "üìà Meter", 
                           value=f"`{bar}` {percentage}%", inline=False)
            
            embed.set_footer(text=f"Testado por / Tested by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            await self.save_interaction(ctx.author.id, 'gay', 
                                      {'user': user.id, 'percentage': percentage, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando gay: {e}")

    @commands.command(name='roleta', aliases=['roulette', 'escolher', 'choose'])
    async def roulette_command(self, ctx, *, options=None):
        """Choose randomly from options / Escolher aleatoriamente entre op√ß√µes"""
        try:
            lang = self.detect_language(ctx.message.content + (options or ''))
            
            if not options:
                error_msg = "Digite as op√ß√µes separadas por v√≠rgula! Ex: `!roleta pizza, hamb√∫rguer, sushi`" if lang == 'pt' else "Enter options separated by commas! Ex: `!roulette pizza, burger, sushi`"
                await ctx.send(error_msg)
                return
            
            choices = [choice.strip() for choice in options.split(',')]
            if len(choices) < 2:
                error_msg = "Voc√™ precisa de pelo menos 2 op√ß√µes!" if lang == 'pt' else "You need at least 2 options!"
                await ctx.send(error_msg)
                return
            
            chosen = random.choice(choices)
            
            embed = discord.Embed(
                title="üé∞ Roleta da Sorte / Lucky Roulette" if lang == 'pt' else "üé∞ Lucky Roulette",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            
            embed.add_field(name="üéØ Op√ß√µes / Options" if lang == 'pt' else "üéØ Options", 
                           value=", ".join(f"`{choice}`" for choice in choices), inline=False)
            embed.add_field(name="üèÜ Escolhido / Chosen" if lang == 'pt' else "üèÜ Chosen", 
                           value=f"**{chosen}**", inline=False)
            
            embed.set_footer(text=f"Solicitado por / Requested by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            # Add spinning animation
            message = await ctx.send("üé∞ Girando a roleta..." if lang == 'pt' else "üé∞ Spinning the roulette...")
            await asyncio.sleep(2)
            await message.edit(content="", embed=embed)
            
            await self.save_interaction(ctx.author.id, 'roulette', 
                                      {'options': choices, 'chosen': chosen, 'language': lang})
        except Exception as e:
            await ctx.send("‚ùå Erro ao executar comando!")
            print(f"Erro no comando roleta: {e}")

    @commands.command(name='estatisticas', aliases=['stats', 'funstats'])
    @commands.cooldown(1, 30, commands.BucketType.user)
    async def fun_stats(self, ctx, user: discord.Member = None):
        """Show fun command statistics / Mostrar estat√≠sticas dos comandos de divers√£o"""
        try:
            lang = self.detect_language(ctx.message.content)
            
            if not user:
                user = ctx.author
            
            # Get user statistics from database
            stats = await self.fun_collection.find({'user_id': user.id}).to_list(length=None)
            
            if not stats:
                no_data_msg = f"Nenhuma estat√≠stica encontrada para {user.display_name}!" if lang == 'pt' else f"No statistics found for {user.display_name}!"
                await ctx.send(no_data_msg)
                return
            
            # Count commands
            command_counts = {}
            for stat in stats:
                cmd = stat.get('command', 'unknown')
                command_counts[cmd] = command_counts.get(cmd, 0) + 1
            
            total_commands = sum(command_counts.values())
            
            embed = discord.Embed(
                title=f"üìä Estat√≠sticas de Divers√£o / Fun Statistics - {user.display_name}",
                color=discord.Color.blurple(),
                timestamp=datetime.utcnow()
            )
            
            embed.add_field(name="üìà Total de Comandos / Total Commands" if lang == 'pt' else "üìà Total Commands", 
                           value=str(total_commands), inline=True)
            
            # Most used command
            if command_counts:
                most_used = max(command_counts, key=command_counts.get)
                embed.add_field(name="üèÜ Comando Favorito / Favorite Command" if lang == 'pt' else "üèÜ Favorite Command", 
                               value=f"{most_used} ({command_counts[most_used]}x)", inline=True)
            
            # Command breakdown
            commands_text = ""
            for cmd, count in sorted(command_counts.items(), key=lambda x: x[1], reverse=True):
                commands_text += f"‚Ä¢ **{cmd}**: {count}x\n"
            
            if commands_text:
                embed.add_field(name="üéÆ Detalhes / Details" if lang == 'pt' else "üéÆ Details", 
                               value=commands_text, inline=False)
            
            embed.set_thumbnail(url=user.display_avatar.url)
            embed.set_footer(text=f"Solicitado por / Requested by {ctx.author.display_name}", 
                            icon_url=ctx.author.display_avatar.url)
            
            await ctx.send(embed=embed)
            
        except Exception as e:
            error_msg = "Erro ao buscar estat√≠sticas!" if lang == 'pt' else "Error fetching statistics!"
            await ctx.send(error_msg)
            print(f"Stats error: {e}")

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """Handle command errors"""
        if isinstance(error, commands.CommandOnCooldown):
            lang = self.detect_language(ctx.message.content)
            remaining = round(error.retry_after)
            
            cooldown_msg = f"‚è∞ Aguarde {remaining} segundos antes de usar este comando novamente!" if lang == 'pt' else f"‚è∞ Wait {remaining} seconds before using this command again!"
            await ctx.send(cooldown_msg, delete_after=10)

async def setup(bot):
    """Setup function to add the cog to the bot"""
    await bot.add_cog(FunCog(bot))
    print("‚úÖ Fun Cog loaded successfully!")